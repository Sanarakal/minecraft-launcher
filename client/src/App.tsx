// client/src/App.tsx
import React, { useEffect, useRef, useState } from 'react';
import html2canvas from 'html2canvas';
import './App.css';

const API = 'http://89.104.67.130:4000';
// –ü—É—Ç—å –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–µ –±—É–¥—É—Ç ¬´–ø–µ—Ä–µ–≤—ë—Ä–Ω—É—Ç—ã¬ª –∫—É–±–∏–∫–∏
const TARGET_IMG = 'assets/flip-target.png';

export default function App() {
  const [username, setUsername] = useState('');
  const [serverIp, setServerIp] = useState('');
  const [status,   setStatus]   = useState('‚è≥ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ‚Ä¶');
  const [ready,    setReady]    = useState(false);
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º React.ReactElement –≤–º–µ—Å—Ç–æ JSX.Element
  const [pieces,   setPieces]   = useState<React.ReactElement[]>([]);
  const contentRef = useRef<HTMLDivElement>(null);

  const ROWS = 10, COLS = 15;
  const TOTAL = ROWS * COLS;
  const DELAY = 30;   // –º—Å –º–µ–∂–¥—É –∫—É–±–∏–∫–∞–º–∏
  const DURA  = 300;  // –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏ –æ–¥–Ω–æ–≥–æ –∫—É–±–∏–∫–∞

  useEffect(() => {
    fetch(`${API}/api/server-info`)
      .then(r => r.json())
      .then(d => {
        setServerIp(d.port === 25565 ? d.ip : `${d.ip}:${d.port}`);
        setStatus(`‚úÖ –°–µ—Ä–≤–µ—Ä: ${d.ip}`);
        setReady(true);
      })
      .catch(() => setStatus('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'));
  }, []);

  const play = async () => {
    if (!username.trim()) {
      setStatus('‚ùå –í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫');
      return;
    }

    setStatus('üöÄ –ó–∞–ø—É—Å–∫ Minecraft‚Ä¶');

    // 1. –ó–∞–ø—É—Å–∫–∞–µ–º Minecraft (detached)
    window.electron.invoke('launch-minecraft', {
      username,
      serverIp,
      version: '1.21.5',
      javaPath:
        'C:\\Program Files\\Eclipse Adoptium\\jdk-21.0.7.6-hotspot\\bin\\java.exe',
    }).catch(console.error);

    // 2. –°–Ω–∏–º–æ–∫ UI –∏ —Ä–∞–∑–±–∏–≤–∫–∞ –Ω–∞ –∫—É—Å–æ—á–∫–∏
    const node = contentRef.current!;
    const canvas = await html2canvas(node, { backgroundColor: null });
    const { width, height } = canvas;
    const cellW = width  / COLS;
    const cellH = height / ROWS;
    const ctx = canvas.getContext('2d')!;

    // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
    const targetImg = await new Promise<HTMLImageElement>((res, rej) => {
      const img = new Image();
      img.src = TARGET_IMG;
      img.onload = () => res(img);
      img.onerror = rej;
    });
    const targetCanvas = document.createElement('canvas');
    targetCanvas.width = width;
    targetCanvas.height = height;
    const tCtx = targetCanvas.getContext('2d')!;
    tCtx.drawImage(targetImg, 0, 0, width, height);

    // –ü–æ–ª–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è —Ñ–æ–Ω–∞ –ø–ª–∏—Ç–æ–∫
    const frontUrl = canvas.toDataURL();
    const backUrl  = targetCanvas.toDataURL();

    // –°–ª—É—á–∞–π–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –∏–Ω–¥–µ–∫—Å–æ–≤
    const order = Array.from({ length: TOTAL }, (_, i) => i).sort(
      () => Math.random() - 0.5
    );

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º React —ç–ª–µ–º–µ–Ω—Ç—ã-–∫—É—Å–æ—á–∫–∏
    const newPieces: React.ReactElement[] = order.map((idx, n) => {
      const r = Math.floor(idx / COLS);
      const c = idx % COLS;

      const position = `-${c * cellW}px -${r * cellH}px`;

      return (
        <div
          key={idx}
          className="piece"
          style={{
            width:  cellW,
            height: cellH,
            left:   c * cellW,
            top:    r * cellH,
            animationDelay:    `${n * DELAY}ms`,
            animationDuration: `${DURA}ms`,
          }}
        >
          <div
            className="face front"
            style={{
              backgroundImage: `url(${frontUrl})`,
              backgroundSize: `${width}px ${height}px`,
              backgroundPosition: position,
            }}
          />
          <div
            className="face back"
            style={{
              backgroundImage: `url(${backUrl})`,
              backgroundSize: `${width}px ${height}px`,
              backgroundPosition: position,
            }}
          />
        </div>
      );
    });

    // 3. –°–∫—Ä—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π UI –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—É—Å–æ—á–∫–∏
    setPieces(newPieces);

    // 4. –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ –ø–æ –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∞–Ω–∏–º–∞—Ü–∏–∏
    const totalTime = order.length * DELAY + DURA + 50;
    setTimeout(() => window.electron.invoke('close-window'), totalTime);
  };

  return (
    <div className="app-container">
      {/* –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∫—É—Å–æ—á–∫–æ–≤ –ø–æ–≤–µ—Ä—Ö –æ–∫–Ω–∞ */}
      {pieces}

      {/* –ò—Å—Ö–æ–¥–Ω—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å */}
      <div
        className="content"
        ref={contentRef}
        style={{ visibility: pieces.length ? 'hidden' : 'visible' }}
      >
        <h1>SexCraft Launcher</h1>
        <input
          className="input"
          placeholder="–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫"
          value={username}
          onChange={e => setUsername(e.target.value)}
        />
        <button
          className="play-button"
          onClick={play}
          disabled={!ready}
        >
          –ò–≥—Ä–∞—Ç—å
        </button>
        <p className="status">{status}</p>
      </div>
    </div>
  );
}
